<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PL_API</name>
    </assembly>
    <members>
        <member name="T:PL_API.Controllers.AuthenticationController">
            <summary>
            Controller for authentification processes
            </summary>
        </member>
        <member name="M:PL_API.Controllers.AuthenticationController.#ctor(BLL.Interfaces.IAuthenticationService,BLL.Interfaces.IUserService,AutoMapper.IMapper)">
            <summary>
            Constructor for creating of controller with given services and mapper profile
            </summary>
            <param name="mapper">Auto mapper profile for models and dtos</param>
            <param name="authService">Authentification service</param>
            <param name="userService">User service</param>
        </member>
        <member name="M:PL_API.Controllers.AuthenticationController.RegisterUSer(PL_API.Models.RegisterModel)">
            <summary>
            The registration of new user
            </summary>
            <param name="registerModel">Model of registered user</param>
            <returns>Instance of object result of creating user</returns>
        </member>
        <member name="M:PL_API.Controllers.AuthenticationController.Login(PL_API.Models.LoginModel)">
            <summary>
            To log user in network
            </summary>
            <param name="loginModel">Instance of data for logging in</param>
            <returns>Result status code</returns>
        </member>
        <member name="T:PL_API.Controllers.ChatController">
            <summary>
            Controller for working with chats
            </summary>
        </member>
        <member name="M:PL_API.Controllers.ChatController.#ctor(BLL.Interfaces.IChatService,AutoMapper.IMapper)">
            <summary>
            Constructor for creating of controller with given services and mapper profile
            </summary>
            <param name="mapper">Auto mapper profile for models and dtos</param>
            <param name="chatService">Chat service</param>
        </member>
        <member name="M:PL_API.Controllers.ChatController.CreateNewChatForUser(PL_API.Models.ChatModel)">
            <summary>
            To create user chat with at least one user
            </summary>
            <param name="chatModel">Model of chat for creating with needed data</param>
        </member>
        <member name="M:PL_API.Controllers.ChatController.GetAllUsersChat">
            <summary>
            To get all chats of authorized user
            </summary>
            <returns>Collection of all chats of this user</returns>
        </member>
        <member name="M:PL_API.Controllers.ChatController.GetAllUsersInChat(System.Int32)">
            <summary>
            To get all users of chosen chat
            </summary>
            <param name="id">Id of chat which users are finding</param>
            <returns>Collection of all users profiles in this chat</returns>
        </member>
        <member name="M:PL_API.Controllers.ChatController.RenameChat(System.Int32,System.String)">
            <summary>
            To rename chat by its id 
            </summary>
            <param name="id">The id of chat which name should be changed</param>
            <param name="name">The new name for chosen chat</param>
        </member>
        <member name="M:PL_API.Controllers.ChatController.AddUserInChat(System.Int32,System.Int32)">
            <summary>
            To add new user in a chat
            </summary>
            <param name="chatId">The id of chat where user should be added</param>
            <param name="userId">The id of user who should be added</param>
        </member>
        <member name="M:PL_API.Controllers.ChatController.DeleteUserFromChat(System.Int32,System.Int32)">
            <summary>
            To delete chosen user from a chat
            </summary>
            <param name="chatId">The id of chat where user should be deleted</param>
            <param name="userId">The id of user who should be deleted</param>
        </member>
        <member name="M:PL_API.Controllers.ChatController.ClearChatHistoryById(System.Int32)">
            <summary>
            To clear a history of messages of chosen chat
            /// </summary>
            <param name="id">The id of chat which history should be cleared</param>
        </member>
        <member name="M:PL_API.Controllers.ChatController.DeleteChat(System.Int32)">
            <summary>
            To delete chosen chat by its unique id
            </summary>
            <param name="id">Id of chat that should be deleted</param>
        </member>
        <member name="M:PL_API.Controllers.ChatController.GetChatById(System.Int32)">
            <summary>
            To get chat with details by its id
            </summary>
            <param name="id">Id of chat that should be returned with details</param>
            <returns>Instance of chat with details</returns>
        </member>
        <member name="M:PL_API.Controllers.ChatController.SetAdminStatusToUser(System.Int32,System.Int32)">
            <summary>
            To change the status of chosen user in chosen chat for admin
            </summary>
            <param name="userId">The id of user who should be an admin</param>
            <param name="chatId">The id of chat where chosen user wanted to be admin</param>
        </member>
        <member name="M:PL_API.Controllers.ChatController.SetDefaultStatusToUser(System.Int32,System.Int32)">
            <summary>
            To change the status of chosen user in chosen chat for default
            </summary>
            <param name="userId">The id of chat that is finding</param>
            <param name="chatId">The id of chat where chosen user wanted to be admin</param>
        </member>
        <member name="T:PL_API.Controllers.CountryController">
            <summary>
            Controller for working with countries
            </summary>
        </member>
        <member name="M:PL_API.Controllers.CountryController.#ctor(BLL.Interfaces.ICountryService,BLL.Interfaces.ICountryChangesHistoryService,BLL.Interfaces.IUserService,AutoMapper.IMapper)">
            <summary>
            Constructor for creating of user controller with given services and mapper profile
            </summary>
            <param name="mapper">Auto mapper profile for models and dtos</param>
            <param name="_countryService">User service</param>
            <param name="_countryChangesService">User profile service</param>
        </member>
        <member name="M:PL_API.Controllers.CountryController.GetAllCountries">
            <summary>
            To get all countries
            </summary>
            <returns>Collection of countries</returns>
        </member>
        <member name="M:PL_API.Controllers.CountryController.GetCountryByIdForAll(System.Int32)">
            <summary>
            To get country by its id allowed for all users
            </summary>
            <param name="id">The id of country which should be found</param>
            <returns>Found country</returns>
        </member>
        <member name="M:PL_API.Controllers.CountryController.GetCountryByName(System.String)">
            <summary>
            To get country by its original name
            </summary>
            <param name="name">The name of country which should be found</param>
            <returns>Found country</returns>
        </member>
        <member name="M:PL_API.Controllers.CountryController.GetCountryByShortName(System.String)">
            <summary>
            To get country by its short name
            </summary>
            <param name="name">The short name of country which should be found</param>
            <returns>Found country</returns>
        </member>
        <member name="M:PL_API.Controllers.CountryController.GetUsersFromCountry(System.Int32)">
            <summary>
            To get users who are originally from a country by country id
            </summary>
            <param name="id">The id of a country which users should be found</param>
            <returns>Found users from the country</returns>
        </member>
        <member name="M:PL_API.Controllers.CountryController.GetUsersInCountry(System.Int32)">
            <summary>
            To get users who are currently in a country by country id
            </summary>
            <param name="id">The id of a country which users should be found</param>
            <returns>Found users who are in the country</returns>
        </member>
        <member name="M:PL_API.Controllers.CountryController.AddNewCountryByUser(PL_API.Models.CountryChangesHistoryModel)">
            <summary>
            To add new country
            </summary>
            <param name="countryChangesModel">Model of country for creating with needed data</param>
        </member>
        <member name="M:PL_API.Controllers.CountryController.RenameCountry(PL_API.Models.CountryModel)">
            <summary>
            To rename country if the same author or by admin
            </summary>
            <param name="countryModel">Model of country for with data for renaming</param>
        </member>
        <member name="M:PL_API.Controllers.CountryController.UpdateCountryInfo(PL_API.Models.CountryChangesHistoryModel)">
            <summary>
            To update country info
            </summary>
            <param name="changes">Model of country for with data for updating</param>
        </member>
        <member name="M:PL_API.Controllers.CountryController.GetCountryVersionByIdForAll(System.Int32)">
            <summary>
            To get country version by its id
            </summary>
            <param name="id">The id of country version which should be found</param>
            <returns>Found country version</returns>
        </member>
        <member name="M:PL_API.Controllers.CountryController.GetCountryVersions(System.Int32)">
            <summary>
            To get all versions of a country by id
            </summary>
            <param name="id">The id of a country which versions should be found</param>
            <returns>Found versions of the country</returns>
        </member>
        <member name="M:PL_API.Controllers.CountryController.GetCountryLastVersion(System.Int32)">
            <summary>
            To get the last version of a country by id
            </summary>
            <param name="id">The id of a country</param>
            <returns>Found version of the country</returns>
        </member>
        <member name="M:PL_API.Controllers.CountryController.ApproveVersion(System.Int32)">
            <summary>
            To approve chosen version
            </summary>
            <param name="id">Id of version to be approved</param>
        </member>
        <member name="M:PL_API.Controllers.CountryController.DisapproveVersion(System.Int32)">
            <summary>
            To disapprove chosen version
            </summary>
            <param name="id">Id of version to be disapproved</param>
        </member>
        <member name="M:PL_API.Controllers.CountryController.DeleteVersionByAdmin(System.Int32)">
            <summary>
            To delete country version
            </summary>
            <param name="id">The id of version to be deleted</param>
            <returns>Result status code</returns>
        </member>
        <member name="M:PL_API.Controllers.CountryController.DeleteCountryByAdmin(System.Int32)">
            <summary>
            To delete country with all country versions by admin
            </summary>
            <param name="id">The id of country to be deleted</param>
            <returns>Result status code</returns>
        </member>
        <member name="M:PL_API.Controllers.CountryController.IfUserCheckedVersion(System.Int32)">
            <summary>
            To check if user already approved or disapproved
            </summary>
            <param name="id">The id of a version to be checked</param>
            <returns>True if already checked</returns>
        </member>
        <member name="T:PL_API.Controllers.ErrorController">
            <summary>
            Controller for error handling
            </summary>
        </member>
        <member name="M:PL_API.Controllers.MessageController.#ctor(BLL.Interfaces.IMessageService,BLL.Interfaces.IUserProfileService,AutoMapper.IMapper)">
            <summary>
            Constructor for creating of controller with given services and mapper profile
            </summary>
            <param name="mapper">Auto mapper profile for models and dtos</param>
            <param name="messageService">Chat service</param>
            <param name="userProfileService">USer profile service</param>
        </member>
        <member name="M:PL_API.Controllers.MessageController.SendMessageInChat(PL_API.Models.MessageModel)">
            <summary>
            To send a new message in chat
            </summary>
            <param name="messageModel">The instance of new message that should be sent</param>
        </member>
        <member name="M:PL_API.Controllers.MessageController.DeleteMessage(System.Int32)">
            <summary>
            To delete chosen message for all users in the chat
            </summary>
            <param name="id">Id of message that should be deleted</param>
        </member>
        <member name="M:PL_API.Controllers.MessageController.GetMessageById(System.Int32)">
            <summary>
            To get an instance of message by its id
            </summary>
            <param name="id">Id of message that is found</param>
            <returns>An instance of found message</returns>
        </member>
        <member name="M:PL_API.Controllers.MessageController.GetAllMessages">
            <summary>
            To get a collection of all messages
            </summary>
            <returns>Collection of messages</returns>
        </member>
        <member name="M:PL_API.Controllers.MessageController.GetMessagesOfChat(System.Int32)">
            <summary>
            To get a collection of all messages
            </summary>
            <returns>Collection of messages</returns>
        </member>
        <member name="T:PL_API.Controllers.MigrantController">
            <summary>
            Controller for working with migrants information
            </summary>
        </member>
        <member name="M:PL_API.Controllers.MigrantController.#ctor(BLL.Interfaces.IUserService,BLL.Interfaces.IMigrantService,AutoMapper.IMapper)">
            <summary>
            Constructor for creating of user controller with given services and mapper profile
            </summary>
            <param name="mapper">Auto mapper profile for models and dtos</param>
            <param name="userService">User service</param>
            <param name="migrantService">Migrant service</param>
        </member>
        <member name="M:PL_API.Controllers.MigrantController.GetAllMigrantsWithDetails">
            <summary>
            To get all migrants information with details
            </summary>
            <returns>Collection of migrants profiles</returns>
        </member>
        <member name="M:PL_API.Controllers.MigrantController.GetMigrantByIdForAll(System.Int32)">
            <summary>
            To get migrant profile by their id allowed for all users
            </summary>
            <param name="id">The id of migrant whose detailed profile should be found</param>
            <returns>Found migrant profile</returns>
        </member>
        <member name="M:PL_API.Controllers.MigrantController.GetAllRefugees">
            <summary>
            To get all migrants, who are oficially refugees
            </summary>
            <returns>Collection of refugees</returns>
        </member>
        <member name="M:PL_API.Controllers.MigrantController.GetAllForcedMigrants">
            <summary>
            To get all migrants, who are forced migrants
            </summary>
            <returns>Collection of forced migrants</returns>
        </member>
        <member name="M:PL_API.Controllers.MigrantController.GetAllCommonMigrants">
            <summary>
            To get all migrants, who are common migrants
            </summary>
            <returns>Collection of common migrants</returns>
        </member>
        <member name="M:PL_API.Controllers.MigrantController.GetUserHousingType(System.Int32)">
            <summary>
            To get housing type of a migrant by their id
            </summary>
            <param name="id">The id of migrant whose housing type should be found</param>
            <returns>Housing type converted to string</returns>
        </member>
        <member name="M:PL_API.Controllers.MigrantController.GetUserFamilyStatus(System.Int32)">
            <summary>
            To get family status of a migrant by their id
            </summary>
            <param name="id">The id of migrant whose family status should be found</param>
            <returns>Family status converted to string</returns>
        </member>
        <member name="M:PL_API.Controllers.MigrantController.AddNewMigrant(PL_API.Models.MigrantModel)">
            <summary>
            To create a migrant profile
            </summary>
            <param name="migrantModel">Model of migrant for creating with needed data</param>
        </member>
        <member name="M:PL_API.Controllers.MigrantController.UpdateMigrantInfo(PL_API.Models.MigrantModel)">
            <summary>
            To update a migrant profile
            </summary>
            <param name="migrantModel">Model of migrant for updating with needed data</param>
        </member>
        <member name="M:PL_API.Controllers.MigrantController.DeleteMigrantById(System.Int32)">
            <summary>
            To delete migrant profile by user themselves or by admin
            </summary>
            <param name="id">The id of migrant profile to be deleted</param>
            <returns>Result status code</returns>
        </member>
        <member name="M:PL_API.Controllers.MigrantController.IfMigrantIsEmployed(System.Int32)">
            <summary>
            To check if migrant is employed
            </summary>
            <param name="id">The id of migrant profile be checked</param>
            <returns>True if employed</returns>
        </member>
        <member name="T:PL_API.Controllers.PostController">
            <summary>
            Controller for working with posts
            </summary>
        </member>
        <member name="M:PL_API.Controllers.PostController.#ctor(BLL.Interfaces.IUserService,BLL.Interfaces.IPostService,BLL.Interfaces.ICountryService,AutoMapper.IMapper)">
            <summary>
            Constructor for creating of user controller with given services and mapper profile
            </summary>
            <param name="mapper">Auto mapper profile for models and dtos</param>
            <param name="userService">User service</param>
            <param name="postService">Post service</param>
        </member>
        <member name="M:PL_API.Controllers.PostController.GetAllPostsWithDetails">
            <summary>
            To get all posts with details
            </summary>
            <returns>Collection of posts</returns>
        </member>
        <member name="M:PL_API.Controllers.PostController.GetPostByIdForAll(System.Int32)">
            <summary>
            To get post by its id allowed for all users
            </summary>
            <param name="id">The id of post which should be found</param>
            <returns>Found post</returns>
        </member>
        <member name="M:PL_API.Controllers.PostController.GetPostsByUserIdForAll(System.Int32)">
            <summary>
            To get all posts of user by their id allowed
            </summary>
            <param name="id">The id of user whose posts should be found</param>
            <returns>Found posts</returns>
        </member>
        <member name="M:PL_API.Controllers.PostController.GetPostsByCountryIdForAll(System.Int32)">
            <summary>
            To get all posts related to a country by the country id
            </summary>
            <param name="id">The id of country for posts should be found</param>
            <returns>Found posts</returns>
        </member>
        <member name="M:PL_API.Controllers.PostController.AddNewPost(PL_API.Models.PostModel)">
            <summary>
            To create a post
            </summary>
            <param name="postModel">Model of migrant for creating with needed data</param>
        </member>
        <member name="M:PL_API.Controllers.PostController.UpdatePost(PL_API.Models.PostModel)">
            <summary>
            To update a post
            </summary>
            <param name="postModel">Model of post for updating with needed data</param>
        </member>
        <member name="M:PL_API.Controllers.PostController.GetSuitablePosts(System.String)">
            <summary>
            To get suitable posts with details
            </summary>
            <param name="ipAddress">The ip address of user for posts should be found</param>
            <returns>Collection of found posts</returns>
        </member>
        <member name="T:PL_API.Controllers.UserController">
            <summary>
            Controller for working with users
            </summary>
        </member>
        <member name="M:PL_API.Controllers.UserController.#ctor(BLL.Interfaces.IUserService,BLL.Interfaces.IUserProfileService,AutoMapper.IMapper)">
            <summary>
            Constructor for creating of user controller with given services and mapper profile
            </summary>
            <param name="mapper">Auto mapper profile for models and dtos</param>
            <param name="userService">User service</param>
            <param name="userProfileService">User profile service</param>
        </member>
        <member name="M:PL_API.Controllers.UserController.GetAllUserProfilesWithDetails">
            <summary>
            To get all users profiles with details
            </summary>
            <returns>Collection of users profiles</returns>
        </member>
        <member name="M:PL_API.Controllers.UserController.GetUserProfileByIdForAll(System.Int32)">
            <summary>
            To get user profile by its id allowed for all users
            </summary>
            <param name="id">The id of user whose detailed profile should be found</param>
            <returns>Found user profile</returns>
        </member>
        <member name="M:PL_API.Controllers.UserController.GetUserRoles">
            <summary>
            To get all user roles
            </summary>
            <returns>Collection of role names</returns>
        </member>
        <member name="M:PL_API.Controllers.UserController.GetAuthorizedUserProfile">
            <summary>
            To get own user profile after autorirization
            </summary>
            <returns>User profile of authorized user</returns>
        </member>
        <member name="M:PL_API.Controllers.UserController.ChangeUserPassword(PL_API.Models.ChangePasswordModel)">
            <summary>
            To change your own password
            </summary>
            <param name="passwordModel">The instance with data for changing password</param>
            <returns>Successfull status code if all is Ok</returns>
        </member>
        <member name="M:PL_API.Controllers.UserController.GetUserProfileWithDetailsByUserName(System.String)">
            <summary>
            To get user profile with all details by his user name
            </summary>
            <param name="name">The user name of user who should be found</param>
            <returns>Found user</returns>
        </member>
        <member name="M:PL_API.Controllers.UserController.GetUsersProfileWithDetailsByFullName(System.String,System.String)">
            <summary>
            To get user profile with all details by his full name
            </summary>
            <param name="first">The first name of user who should be found</param>
            <param name="last">The last name of user who should be found</param>
            <returns>Found user</returns>
        </member>
        <member name="M:PL_API.Controllers.UserController.GetUserProfileWithDetailsByPhone(System.String)">
            <summary>
            To get user profile with all details by his phone number
            </summary>
            <param name="phoneNumber">The phone number of user who should be found</param>
            <returns>Found user</returns>
        </member>
        <member name="M:PL_API.Controllers.UserController.AddUserToRole(System.Int32,System.String)">
            <summary>
            To add chosen user to chosen role
            </summary>
            <param name="id">The id of user who should be added to role</param>
            <param name="role">The role name where user should be added to</param>
            <returns>Result status code</returns>
        </member>
        <member name="M:PL_API.Controllers.UserController.UpdateUserInfoByUser(PL_API.Models.UserModel)">
            <summary>
            To update user info by this user
            </summary>
            <param name="userModel">Changed data of user</param>
            <returns>Updated user profile</returns>
        </member>
        <member name="M:PL_API.Controllers.UserController.UpdateUserInfoByAdmin(System.Int32,PL_API.Models.UserModel)">
            <summary>
            To update user info by admin
            </summary>
            <param name="userModel">Changed data of user</param>
            <param name="id">The id user whose information should changed</param>
            <returns>Updated user profile</returns>
        </member>
        <member name="M:PL_API.Controllers.UserController.DeleteUserByHimself">
            <summary>
            To delete user because of his own desire
            </summary>
            <returns>Result status code</returns>        
        </member>
        <member name="M:PL_API.Controllers.UserController.DeleteUserByAdmin(System.Int32)">
            <summary>
            To delete any user by admin
            </summary>
            <param name="id">The id of user who should be deleted</param>
            <returns>Result status code</returns>
        </member>
        <member name="M:PL_API.Controllers.UserController.GetUsersOriginalCountryByUserId(System.Int32)">
            <summary>
            To get an original country of user bu the user's id
            </summary>
             /// <param name="id">The id of user, whose original country is being looked for</param>
            <returns>Found user's original country instance</returns>
        </member>
        <member name="M:PL_API.Controllers.UserController.GetUsersCurrentCountryByUserId(System.Int32)">
            <summary>
            To get a current country of user bu the user's id
            </summary>
             /// <param name="id">The id of user, whose current country is being looked for</param>
            <returns>Found user's current country instance</returns>
        </member>
        <member name="T:PL_API.Controllers.VolunteerController">
            <summary>
            Controller for working with volunteers information
            </summary>
        </member>
        <member name="M:PL_API.Controllers.VolunteerController.#ctor(BLL.Interfaces.IUserService,BLL.Interfaces.IVolunteerService,AutoMapper.IMapper)">
            <summary>
            Constructor for creating of user controller with given services and mapper profile
            </summary>
            <param name="mapper">Auto mapper profile for models and dtos</param>
            <param name="userService">User service</param>
            <param name="volunteerService">Migrant service</param>
        </member>
        <member name="M:PL_API.Controllers.VolunteerController.GetAllMigrantsWithDetails">
            <summary>
            To get all volunteers information with details
            </summary>
            <returns>Collection of volunteers profiles</returns>
        </member>
        <member name="M:PL_API.Controllers.VolunteerController.GetMigrantByIdForAll(System.Int32)">
            <summary>
            To get volunteer profile by their id allowed for all users
            </summary>
            <param name="id">The id of volunteer whose detailed profile should be found</param>
            <returns>Found volunteer profile</returns>
        </member>
        <member name="M:PL_API.Controllers.VolunteerController.GetAllOrganistaions">
            <summary>
            To get all volunteers, who represent organisations
            </summary>
            <returns>Collection of volunteers, who represent organisations</returns>
        </member>
        <member name="M:PL_API.Controllers.VolunteerController.GetAllCommonVolunteer">
            <summary>
            To get all volunteers, who are just common people
            </summary>
            <returns>Collection of volunteers, who are just common people</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PL_API.Controllers.VolunteerController.GetAllTranslators" -->
        <!-- Badly formed XML comment ignored for member "M:PL_API.Controllers.VolunteerController.GetAllForHousing" -->
        <member name="M:PL_API.Controllers.VolunteerController.AddNewVolunteer(PL_API.Models.VolunteerModel)">
            <summary>
            To create a volunteer profile
            </summary>
            <param name="volunteerModel">Model of volunteer for creating with needed data</param>
        </member>
        <member name="M:PL_API.Controllers.VolunteerController.UpdateVolunteerInfo(PL_API.Models.VolunteerModel)">
            <summary>
            To update a volunteer profile
            </summary>
            <param name="volunteerModel">Model of volunteer for updating with needed data</param>
        </member>
        <member name="M:PL_API.Controllers.VolunteerController.DeleteVolunteerById(System.Int32)">
            <summary>
            To delete volunteer profile by user themselves or by admin
            </summary>
            <param name="id">The id of volunteer profile to be deleted</param>
            <returns>Result status code</returns>
        </member>
        <member name="T:PL_API.ErrorBuilder.ApiErrorBuilder">
            <summary>
            Class for returning errors by api
            </summary>
        </member>
        <member name="M:PL_API.ErrorBuilder.ApiErrorBuilder.#ctor(System.String,System.Net.HttpStatusCode)">
            <summary>
            Constructor for creating error object with given parametrs
            </summary>
            <param name="message">The message of sent exception</param>
            <param name="code">The status code of exception</param>
        </member>
    </members>
</doc>
